#include <stdio.h>
#include <stdbool.h>

void error_message(const char *msg) {
    printf("Error: %s\n", msg);
}

bool is_argument(char c) {
    return (c >= 33 && c <= 126);
}

int validate_pipes(const char *input) {
    bool in_single_quote = false;
    bool in_double_quote = false;
    bool found_pipe = false;
    bool valid_argument = false;

    int i = 0;
    while (input[i] != '\0') {
        char c = input[i];

        // Handle quotes skipping
        if (c == '\'' && !in_double_quote) {
            in_single_quote = !in_single_quote;
            i++;
            continue;
        }
        if (c == '"' && !in_single_quote) {
            in_double_quote = !in_double_quote;
            i++;
            continue;
        }

        // If we are inside quotes, skip the character
        if (in_single_quote || in_double_quote) {
            i++;
            continue;
        }

        // Check for consecutive pipes
        if (c == '|') {
            if (found_pipe) {
                error_message("Consecutive '|' found.");
                return 1;
            }
            found_pipe = true;
        } else {
            found_pipe = false;
        }

        // Check for arguments
        if (is_argument(c) && c != '|') {
            valid_argument = true;
        }

        i++;
    }

    // Check if there are unclosed quotes
    if (in_single_quote || in_double_quote) {
        error_message("Unclosed quote found.");
        return 1;
    }

    // Check if no valid arguments
    if (!valid_argument) {
        error_message("No valid arguments found.");
        return 1;
    }

    return 0;
}

int main(int ac, char **av)
{
	if (ac == 2)
	{
		if (validate_pipes(av[1]) == 0)
			printf("Input is valid.\n");
		return 0;
	}
}
